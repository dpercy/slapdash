input = "L1, L5, R1, R3, L4, L5, R5, R1, L2, L2, L3, R4, L2, R3, R1, L2, R5, R3, L4, R4, L3, R3, R3, L2, R1, L3, R2, L1, R4, L2, R4, L4, R5, L3, R1, R1, L1, L3, L2, R1, R3, R2, L1, R4, L4, R2, L189, L4, R5, R3, L1, R47, R4, R1, R3, L3, L3, L2, R70, L1, R4, R185, R5, L4, L5, R4, L1, L4, R5, L3, R2, R3, L5, L3, R5, L1, R5, L4, R1, R2, L2, L5, L2, R4, L3, R5, R1, L5, L4, L3, R4, L3, L4, L1, L5, L5, R5, L5, L2, L1, L2, L4, L1, L2, R3, R1, R1, L2, L5, R2, L3, L5, L4, L2, L1, L2, R3, L1, L4, R3, R3, L2, R5, L1, L3, L3, L3, L5, R5, R1, R2, L3, L2, R4, R1, R1, R3, R4, R3, L3, R3, L5, R2, L2, R4, R5, L4, L3, L1, L5, L1, R1, R2, L1, R3, R4, R5, R2, R3, L2, L1, L5"

startswith s prefix = equal prefix (take (length prefix) s)

split "" delim = cons "" empty
split input delim = cons "" (split (drop (length delim) input) delim) if startswith input delim
split input delim = addFirst (take 1 input) (split (drop 1 input) delim) if isString input

addFirst prefix (cons hd tl) = cons (add prefix hd) tl
addFirst "x" (cons "y" potato)


instructions = map parseInstruction (split input ", ")

parseInstruction s = Inst (take 1 s) (parseInt (drop 1 s))
map f xs = empty if equal xs empty
map f (cons x xs) = cons (f x) (map f xs)


"TODO implement comments"

turn "R" "up" = "right"
turn "R" "right" = "down"
turn "R" "down" = "left"
turn "R" "left" = "up"
turn "L" facing = turn "R" (turn "R" (turn "R" facing))

turn "L" "down"

translate (Pos x y) (Pos xx yy) = Pos (add x xx) (add y yy)

initialState = (State "up" (Pos 0 0))

step (State heading pos) (Inst angle mag) = move mag (State (turn angle heading) pos)


fromPolar "up"    mag = Pos 0 (sub 0 mag)
fromPolar "down"  mag = Pos 0 (add 0 mag)
fromPolar "left"  mag = Pos (sub 0 mag) 0
fromPolar "right" mag = Pos (add 0 mag) 0

move amount (State heading pos) = (State heading (translate (fromPolar heading amount) pos))

step initialState (Inst "R" 5)

steps st insts = st if equal insts empty
steps st (cons i insts) = steps (step st i) insts

measure (State h (Pos x y)) = add (abs x) (abs y)

abs x = x if gte x 0
abs x = (sub 0 x) if lt x 0

measure (steps initialState instructions)

"TODO why doesn't this work?? should be 126"
stepsSeen seen (State h pos) insts = Dammit seen (State h pos) if contains seen pos
stepsSeen seen (State h pos) (cons i insts) = stepsSeen (cons pos seen) (step (State h pos) i) insts

contains xs elem = false if equal xs empty
contains (cons x xs) elem = true if equal x elem
contains (cons x xs) elem = contains xs elem

stepsSeen empty initialState (map parseInstruction (split "R1,L1,L1,L1,R100" ","))
stepsSeen empty initialState instructions
